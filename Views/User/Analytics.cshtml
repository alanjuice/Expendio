@{
    ViewData["Title"] = "Analytics";
}

<style>
    .chart-wrapper {
        height: 312px;
        width: 312px;
    }

</style>


<div class="container">
    <h3 class="text-left my-4">Expenses vs Incomes This Year...</h3>
    <div class="row justify-content-left">
        <div class="col-md-10 col-lg-8">
            <div class="card">
                <div class="card-body">
                    <canvas id="chart1" class="w-100" style="height: 300px;"></canvas>
                </div>
            </div>
            <h4 class="text-left my-4" id="error-message" style="color:red"></h4>
        </div>
        <br /><br /><br />
        <div class="d-flex p-2 flex-row justify-content-around chart-contain">
            <div class="chart-wrapper">
                <h2>Income Sources</h2>
                <br />
                <canvas id="incomePieChart"></canvas>
            </div>
            <div class="chart-wrapper">
                <h2>Expense Categories</h2>
                <br />
                <canvas id="expensePieChart" width="10" height="10"></canvas>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        $.ajax({
            url: '/User/ChartDataYearCategory',
            method: 'GET',
            success: function (data) {
                console.log(data);
                var incomeSources = data.incomes.map(item => item.source);
                var incomeTotals = data.incomes.map(item => item.total);
                var expenseCategories = data.expenses.map(item => item.category);
                var expenseTotals = data.expenses.map(item => item.total);

                var ctxIncome = document.getElementById('incomePieChart').getContext('2d');
                new Chart(ctxIncome, {
                    type: 'pie',
                    data: {
                        labels: incomeSources,
                        datasets: [{
                            data: incomeTotals,
                            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],
                        }]
                    },
                    options: {
                            responsive: true,
                        }
                });

                var ctxExpense = document.getElementById('expensePieChart').getContext('2d');
                new Chart(ctxExpense, {
                    type: 'pie',
                    data: {
                        labels: expenseCategories,
                        datasets: [{
                            data: expenseTotals,
                            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],
                        }]
                    },
                    options: {
                        responsive: true,
                    }
                   
                });
            }
        });

        $.ajax({
            type: "POST",
            url: "/User/ChartDataYear",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                console.log(data);
                if (data.expenses.length === 0 && data.incomes.length === 0) {
                    $('#error-message').text("No data available");
                    $('#chart1').hide();
                    return;
                }

                const monthNames = [
                    'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ];

                const expenseMap = {};
                data.expenses.forEach(entry => {
                    expenseMap[entry.month] = entry.total;
                });

                const incomeMap = {};
                data.incomes.forEach(entry => {
                    incomeMap[entry.month] = entry.total;
                });

                const months = Array.from(new Set([...data.expenses.map(e => e.month), ...data.incomes.map(i => i.month)])).sort((a, b) => a - b);

                const monthLabels = months.map(month => monthNames[month - 1]);
                const expensesData = months.map(month => expenseMap[month] || 0);
                const incomesData = months.map(month => incomeMap[month] || 0);

                new Chart(
                    $("#chart1"),
                    {
                        type: 'bar',
                        data: {
                            labels: monthLabels,
                            datasets: [
                                {
                                    label: 'Expenses',
                                    data: expensesData,
                                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                    borderColor: 'rgba(255, 99, 132, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: 'Incomes',
                                    data: incomesData,
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 1
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                        }
                        
                    }
                );
            },
        });
    });
</script>
